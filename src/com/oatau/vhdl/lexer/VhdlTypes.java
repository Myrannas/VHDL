// This is a generated file. Not intended for manual editing.
package com.oatau.vhdl.lexer;

import com.intellij.psi.tree.IElementType;
import com.oatau.vhdl.psi.SimpleTokenType;

public interface VhdlTypes {

  IElementType BITLIT = new SimpleTokenType("bitlit");
  IElementType CHARLIT = new SimpleTokenType("character");
  IElementType COMMENT = new SimpleTokenType("comment");
  IElementType EXDIGIT = new SimpleTokenType("exdigit");
  IElementType EXID = new SimpleTokenType("exid");
  IElementType ID = new SimpleTokenType("id");
  IElementType INTLIT = new SimpleTokenType("intlit");
  IElementType LETLIT = new SimpleTokenType("letter");
  IElementType SIGLIT = new SimpleTokenType("siglit");
  IElementType STRLIT = new SimpleTokenType("strlit");
  IElementType ABS = new SimpleTokenType("abs");
  IElementType ACCESS = new SimpleTokenType("access");
  IElementType ADD = new SimpleTokenType("+");
  IElementType AFTER = new SimpleTokenType("after");
  IElementType ALIAS = new SimpleTokenType("alias");
  IElementType ALL = new SimpleTokenType("all");
  IElementType AND = new SimpleTokenType("and");
  IElementType ARCHITECTURE = new SimpleTokenType("architecture");
  IElementType ARRAY = new SimpleTokenType("array");
  IElementType ASSERT = new SimpleTokenType("assert");
  IElementType ATTRIBUTE = new SimpleTokenType("attribute");
  IElementType BEGIN = new SimpleTokenType("begin");
  IElementType BLOCK = new SimpleTokenType("block");
  IElementType BLOCK_ASSIGN = new SimpleTokenType(":=");
  IElementType BODY = new SimpleTokenType("body");
  IElementType BUFFER = new SimpleTokenType("buffer");
  IElementType BUS = new SimpleTokenType("bus");
  IElementType CASE = new SimpleTokenType("case");
  IElementType CMA = new SimpleTokenType(",");
  IElementType COLON = new SimpleTokenType(":");
  IElementType COMPONENT = new SimpleTokenType("component");
  IElementType CONCAT = new SimpleTokenType("&");
  IElementType CONFIGURATION = new SimpleTokenType("configuration");
  IElementType CONSTANT = new SimpleTokenType("constant");
  IElementType CONSTRAINT = new SimpleTokenType("constraint");
  IElementType DISCONNECT = new SimpleTokenType("disconnect");
  IElementType DIV = new SimpleTokenType("/");
  IElementType DOT = new SimpleTokenType(".");
  IElementType DOWNTO = new SimpleTokenType("downto");
  IElementType ELSE = new SimpleTokenType("else");
  IElementType ELSIF = new SimpleTokenType("elsif");
  IElementType END = new SimpleTokenType("end");
  IElementType ENTITY = new SimpleTokenType("entity");
  IElementType EQU = new SimpleTokenType("=");
  IElementType EXIT = new SimpleTokenType("exit");
  IElementType EXP = new SimpleTokenType("**");
  IElementType FILE = new SimpleTokenType("file");
  IElementType FOR = new SimpleTokenType("for");
  IElementType FUNCTION = new SimpleTokenType("function");
  IElementType GENERATE = new SimpleTokenType("generate");
  IElementType GENERIC = new SimpleTokenType("generic");
  IElementType GROUP = new SimpleTokenType("group");
  IElementType GT = new SimpleTokenType(">");
  IElementType GTE = new SimpleTokenType(">=");
  IElementType GUARDED = new SimpleTokenType("guarded");
  IElementType IF = new SimpleTokenType("if");
  IElementType IMPURE = new SimpleTokenType("impure");
  IElementType IN = new SimpleTokenType("in");
  IElementType INERTIAL = new SimpleTokenType("inertial");
  IElementType INOUT = new SimpleTokenType("inout");
  IElementType IS = new SimpleTokenType("is");
  IElementType LABEL = new SimpleTokenType("label");
  IElementType LEFPAREN = new SimpleTokenType("(");
  IElementType LIBRARY = new SimpleTokenType("library");
  IElementType LINKAGE = new SimpleTokenType("linkage");
  IElementType LITERAL = new SimpleTokenType("literal");
  IElementType LOOP = new SimpleTokenType("loop");
  IElementType LT = new SimpleTokenType("<");
  IElementType MAP = new SimpleTokenType("map");
  IElementType MOD = new SimpleTokenType("mod");
  IElementType MUL = new SimpleTokenType("*");
  IElementType NAND = new SimpleTokenType("nand");
  IElementType NE = new SimpleTokenType("<>");
  IElementType NEW = new SimpleTokenType("new");
  IElementType NEXT = new SimpleTokenType("next");
  IElementType NOBLOCK_ASSIGN = new SimpleTokenType("<=");
  IElementType NOR = new SimpleTokenType("nor");
  IElementType NOT = new SimpleTokenType("not");
  IElementType NULL = new SimpleTokenType("null");
  IElementType OF = new SimpleTokenType("of");
  IElementType ON = new SimpleTokenType("on");
  IElementType OPEN = new SimpleTokenType("open");
  IElementType OR = new SimpleTokenType("or");
  IElementType OTHERS = new SimpleTokenType("others");
  IElementType OUT = new SimpleTokenType("out");
  IElementType PACKAGE = new SimpleTokenType("package");
  IElementType PORT = new SimpleTokenType("port");
  IElementType POSTPONED = new SimpleTokenType("postponed");
  IElementType PROCEDURE = new SimpleTokenType("procedure");
  IElementType PROCESS = new SimpleTokenType("process");
  IElementType PURE = new SimpleTokenType("pure");
  IElementType RARR = new SimpleTokenType("=>");
  IElementType RECORD = new SimpleTokenType("record");
  IElementType REGISTER = new SimpleTokenType("register");
  IElementType REJECT = new SimpleTokenType("reject");
  IElementType REM = new SimpleTokenType("rem");
  IElementType REPORT = new SimpleTokenType("report");
  IElementType RETURN = new SimpleTokenType("return");
  IElementType RIGHPAREN = new SimpleTokenType(")");
  IElementType ROL = new SimpleTokenType("rol");
  IElementType ROR = new SimpleTokenType("ror");
  IElementType SELECT = new SimpleTokenType("select");
  IElementType SEMI = new SimpleTokenType(";");
  IElementType SEVERITY = new SimpleTokenType("severity");
  IElementType SHARED = new SimpleTokenType("shared");
  IElementType SIGNAL = new SimpleTokenType("signal");
  IElementType SLA = new SimpleTokenType("sla");
  IElementType SLL = new SimpleTokenType("sll");
  IElementType SRA = new SimpleTokenType("sra");
  IElementType SRL = new SimpleTokenType("srl");
  IElementType SUB = new SimpleTokenType("-");
  IElementType SUBTYPE = new SimpleTokenType("subtype");
  IElementType THEN = new SimpleTokenType("then");
  IElementType TO = new SimpleTokenType("to");
  IElementType TRANSPORT = new SimpleTokenType("transport");
  IElementType TYPE = new SimpleTokenType("type");
  IElementType UNAFFECTED = new SimpleTokenType("unaffected");
  IElementType UNITS = new SimpleTokenType("units");
  IElementType UNTIL = new SimpleTokenType("until");
  IElementType USE = new SimpleTokenType("use");
  IElementType VARIABLE = new SimpleTokenType("variable");
  IElementType WHEN = new SimpleTokenType("when");
  IElementType WHILE = new SimpleTokenType("while");
  IElementType WITH = new SimpleTokenType("with");
  IElementType XNOR = new SimpleTokenType("xnor");
  IElementType XOR = new SimpleTokenType("xor");
}
