/* The following code was generated by JFlex 1.4.1 on 1/03/13 8:55 AM */

package com.oatau.vhdl.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 1/03/13 8:55 AM from the specification file
 * <tt>C:/Users/Administrator/IdeaProjects/VHDL2/src/com/oatau/vhdl/lexer/Lexer.flex</tt>
 */
class _VhdlLexer implements FlexLexer {
 /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_VALUE = 1;
  public static final int IN_KEY_VALUE_SEPARATOR = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\3\1\0\1\1\1\3\22\0\1\1\1\0\1\11"+
    "\3\0\1\47\1\7\1\36\1\37\1\43\1\41\1\57\1\2\1\33"+
    "\1\42\2\10\10\5\1\35\1\34\1\50\1\40\1\51\2\0\1\20"+
    "\1\26\1\22\1\44\1\13\1\31\1\32\1\23\1\16\1\56\1\55"+
    "\1\25\1\46\1\14\1\30\1\52\1\4\1\21\1\27\1\15\1\24"+
    "\1\54\1\53\1\45\1\17\1\4\3\0\1\12\1\6\1\0\1\20"+
    "\1\26\1\22\1\44\1\13\1\31\1\32\1\23\1\16\1\56\1\55"+
    "\1\25\1\46\1\14\1\30\1\52\1\4\1\21\1\27\1\15\1\24"+
    "\1\54\1\53\1\45\1\17\1\4\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\2\1\16\4"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\3\4\1\17\1\20\1\21\3\4\1\22\1\23"+
    "\2\0\1\24\1\0\12\4\1\25\1\26\1\27\1\30"+
    "\34\4\1\31\1\4\1\32\1\4\1\33\7\4\1\34"+
    "\1\35\1\36\1\37\6\4\1\40\1\41\7\4\1\42"+
    "\1\24\1\4\1\43\3\4\1\44\2\4\1\45\1\46"+
    "\6\4\1\47\5\4\1\50\1\51\4\4\1\52\2\4"+
    "\1\53\1\54\6\4\1\55\6\4\1\56\6\4\1\57"+
    "\1\60\2\4\1\61\1\62\1\4\1\63\3\4\1\64"+
    "\6\4\1\65\1\66\1\67\12\4\1\70\1\4\1\71"+
    "\1\72\1\73\1\74\1\75\1\4\1\76\16\4\1\77"+
    "\12\4\1\100\3\4\1\101\6\4\1\102\1\103\6\4"+
    "\1\104\2\4\1\105\1\106\1\4\1\107\1\110\3\4"+
    "\1\111\2\4\1\112\2\4\1\113\2\4\1\114\1\4"+
    "\1\115\7\4\1\116\1\117\4\4\1\120\1\121\1\4"+
    "\1\122\10\4\1\123\6\4\1\124\1\4\1\125\2\4"+
    "\1\126\2\4\1\127\1\130\1\131\1\4\1\132\1\133"+
    "\10\4\1\134\1\135\1\4\1\136\1\137\1\4\1\140"+
    "\5\4\1\141\17\4\1\142\1\143\1\144\1\4\1\145"+
    "\1\4\1\146\1\4\1\147\1\4\1\150\1\151\4\4"+
    "\1\152\2\4\1\153\1\154\4\4\1\155\1\156\1\157"+
    "\3\4\1\160\1\161\1\162\3\4\1\163\2\4\1\164"+
    "\1\165\1\4\1\166\1\4\1\167\1\170\2\4\1\171"+
    "\1\4\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\360\0\u0120\0\u0150"+
    "\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0\0\u02d0"+
    "\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420\0\140"+
    "\0\140\0\u0450\0\140\0\140\0\u0480\0\140\0\u04b0\0\u04e0"+
    "\0\u0510\0\u0540\0\u0570\0\140\0\u05a0\0\u05d0\0\u0600\0\u0630"+
    "\0\u0660\0\140\0\u0690\0\u06c0\0\u0180\0\140\0\u06f0\0\u0720"+
    "\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840\0\u0870\0\u08a0"+
    "\0\u08d0\0\360\0\u0900\0\360\0\360\0\u0930\0\u0960\0\u0990"+
    "\0\u09c0\0\u09f0\0\u0a20\0\u0a50\0\u0a80\0\u0ab0\0\u0ae0\0\u0b10"+
    "\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00\0\u0c30\0\u0c60\0\u0c90"+
    "\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50\0\u0d80\0\u0db0\0\u0de0\0\u0e10"+
    "\0\u0e40\0\360\0\u0e70\0\360\0\u0ea0\0\360\0\u0ed0\0\u0f00"+
    "\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\140\0\140\0\140"+
    "\0\140\0\u1020\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\140"+
    "\0\140\0\u1140\0\u1170\0\u11a0\0\u11d0\0\u1200\0\u1230\0\u1260"+
    "\0\140\0\u0180\0\u1290\0\360\0\u12c0\0\u12f0\0\u1320\0\360"+
    "\0\u1350\0\u1380\0\360\0\360\0\u13b0\0\u13e0\0\u1410\0\u1440"+
    "\0\u1470\0\u14a0\0\360\0\u14d0\0\u1500\0\u1530\0\u1560\0\u1590"+
    "\0\360\0\360\0\u15c0\0\u15f0\0\u1620\0\u1650\0\360\0\u1680"+
    "\0\u16b0\0\360\0\360\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0"+
    "\0\u17d0\0\360\0\u1800\0\u1830\0\u1860\0\u1890\0\u18c0\0\u18f0"+
    "\0\360\0\u1920\0\u1950\0\u1980\0\u19b0\0\u19e0\0\u1a10\0\360"+
    "\0\360\0\u1a40\0\u1a70\0\360\0\360\0\u1aa0\0\360\0\u1ad0"+
    "\0\u1b00\0\u1b30\0\360\0\u1b60\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20"+
    "\0\u1c50\0\360\0\360\0\360\0\u1c80\0\u1cb0\0\u1ce0\0\u1d10"+
    "\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30\0\360\0\u1e60"+
    "\0\360\0\360\0\360\0\360\0\360\0\u1e90\0\360\0\u1ec0"+
    "\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0\0\u1fe0\0\u2010\0\u2040"+
    "\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130\0\360\0\u2160\0\u2190"+
    "\0\u21c0\0\u21f0\0\u2220\0\u2250\0\u2280\0\u22b0\0\u22e0\0\u2310"+
    "\0\360\0\u2340\0\u2370\0\u23a0\0\360\0\u23d0\0\u2400\0\u2430"+
    "\0\u2460\0\u2490\0\u24c0\0\360\0\360\0\u24f0\0\u2520\0\u2550"+
    "\0\u2580\0\u25b0\0\u25e0\0\360\0\u2610\0\u2640\0\360\0\360"+
    "\0\u2670\0\360\0\360\0\u26a0\0\u26d0\0\u2700\0\360\0\u2730"+
    "\0\u2760\0\360\0\u2790\0\u27c0\0\360\0\u27f0\0\u2820\0\360"+
    "\0\u2850\0\360\0\u2880\0\u28b0\0\u28e0\0\u2910\0\u2940\0\u2970"+
    "\0\u29a0\0\360\0\360\0\u29d0\0\u2a00\0\u2a30\0\u2a60\0\360"+
    "\0\360\0\u2a90\0\360\0\u2ac0\0\u2af0\0\u2b20\0\u2b50\0\u2b80"+
    "\0\u2bb0\0\u2be0\0\u2c10\0\360\0\u2c40\0\u2c70\0\u2ca0\0\u2cd0"+
    "\0\u2d00\0\u2d30\0\360\0\u2d60\0\360\0\u2d90\0\u2dc0\0\360"+
    "\0\u2df0\0\u2e20\0\360\0\360\0\360\0\u2e50\0\360\0\360"+
    "\0\u2e80\0\u2eb0\0\u2ee0\0\u2f10\0\u2f40\0\u2f70\0\u2fa0\0\u2fd0"+
    "\0\360\0\360\0\u3000\0\360\0\360\0\u3030\0\360\0\u3060"+
    "\0\u3090\0\u30c0\0\u30f0\0\u3120\0\360\0\u3150\0\u3180\0\u31b0"+
    "\0\u31e0\0\u3210\0\u3240\0\u3270\0\u32a0\0\u32d0\0\u3300\0\u3330"+
    "\0\u3360\0\u3390\0\u33c0\0\u33f0\0\360\0\360\0\360\0\u3420"+
    "\0\360\0\u3450\0\360\0\u3480\0\360\0\u34b0\0\360\0\360"+
    "\0\u34e0\0\u3510\0\u3540\0\u3570\0\360\0\u35a0\0\u35d0\0\360"+
    "\0\360\0\u3600\0\u3630\0\u3660\0\u3690\0\360\0\360\0\360"+
    "\0\u36c0\0\u36f0\0\u3720\0\360\0\360\0\360\0\u3750\0\u3780"+
    "\0\u37b0\0\360\0\u37e0\0\u3810\0\360\0\360\0\u3840\0\360"+
    "\0\u3870\0\360\0\360\0\u38a0\0\u38d0\0\360\0\u3900\0\360";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\4\1\6\1\7\1\6\1\10"+
    "\1\7\1\11\1\3\1\12\1\13\1\14\1\15\1\6"+
    "\1\16\1\17\1\20\1\6\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\2\6\1\52\1\3"+
    "\1\4\1\3\1\4\54\3\61\0\1\4\1\0\1\4"+
    "\56\0\1\53\61\0\3\6\1\0\1\6\2\0\20\6"+
    "\11\0\3\6\3\0\5\6\6\0\2\7\1\0\1\7"+
    "\57\0\1\54\47\0\11\55\1\56\1\57\45\55\4\0"+
    "\3\6\1\0\1\6\2\0\1\6\1\60\10\6\1\61"+
    "\5\6\11\0\1\6\1\62\1\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\63\4\6\1\64\3\6"+
    "\1\65\3\6\1\66\2\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\4\6\1\67\1\6"+
    "\1\70\1\6\1\71\4\6\1\72\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\6"+
    "\1\73\12\6\1\74\1\6\1\75\1\6\11\0\2\6"+
    "\1\76\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\6\1\77\1\100\3\6\1\101\1\102\2\6\1\103"+
    "\1\104\1\105\1\6\1\106\1\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\107\14\6"+
    "\1\110\2\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\5\6\1\111\7\6\1\112\2\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\1\6\1\113\12\6\1\114\3\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\3\6"+
    "\1\115\1\6\1\116\7\6\1\117\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\120"+
    "\10\6\1\121\1\122\2\6\1\123\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\124"+
    "\2\6\1\125\2\6\1\126\1\6\1\127\1\130\1\131"+
    "\5\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\6\1\132\1\133\3\6\1\134\2\6"+
    "\1\135\4\6\1\136\1\6\11\0\3\6\3\0\1\137"+
    "\4\6\5\0\3\6\1\0\1\6\2\0\3\6\1\140"+
    "\5\6\1\141\3\6\1\142\2\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\143\5\6"+
    "\1\144\2\6\1\145\6\6\11\0\3\6\3\0\5\6"+
    "\41\0\1\146\70\0\1\147\46\0\1\150\62\0\1\151"+
    "\20\0\3\6\1\0\1\6\2\0\3\6\1\152\11\6"+
    "\1\153\2\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\6\1\154\13\6\1\155\2\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\5\6\1\156\7\6\1\157\2\6\11\0\3\6"+
    "\3\0\5\6\41\0\1\160\10\0\1\150\46\0\1\161"+
    "\23\0\3\6\1\0\1\6\2\0\5\6\1\162\1\163"+
    "\2\6\1\164\3\6\1\165\2\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\3\6\1\166"+
    "\4\6\1\167\7\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\5\6\1\170\12\6\11\0"+
    "\3\6\3\0\5\6\1\0\3\53\1\0\54\53\7\0"+
    "\1\171\50\0\11\55\1\172\1\57\45\55\4\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\173\15\6\11\0\1\174"+
    "\2\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\14\6\1\175\3\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\3\6\1\176\14\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\20\6\11\0\1\6\1\177\1\6\3\0\1\6\1\200"+
    "\3\6\5\0\3\6\1\0\1\6\2\0\1\6\1\201"+
    "\16\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\12\6\1\202\5\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\2\6\1\203"+
    "\3\6\1\204\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\20\6\11\0\3\6\3\0"+
    "\1\205\4\6\5\0\3\6\1\0\1\6\2\0\5\6"+
    "\1\206\12\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\207\17\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\210\14\6"+
    "\1\211\2\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\20\6\11\0\3\6\3\0\1\212"+
    "\4\6\5\0\3\6\1\0\1\6\2\0\20\6\11\0"+
    "\1\213\2\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\2\6\1\214\15\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\6\6\1\215\1\216"+
    "\10\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\7\6\1\217\10\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\3\6\1\220"+
    "\6\6\1\221\5\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\14\6\1\222\3\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\14\6\1\223\3\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\2\6\1\224\15\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\2\6\1\225\14\6\1\226\11\0\2\6\1\227\3\0"+
    "\1\230\3\6\1\231\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\232\3\6\1\233\5\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\14\6\1\234"+
    "\3\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\6\1\235\16\6\11\0\2\6\1\236"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\2\6"+
    "\1\237\1\240\1\6\1\241\12\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\242\17\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\1\6\1\243\1\244\10\6\1\245\4\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\13\6\1\246\4\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\15\6\1\247\2\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\17\6\1\250\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\14\6\1\251\1\6\1\252\1\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\15\6\1\253\2\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\20\6\11\0\1\254"+
    "\2\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\12\6\1\255\5\6\11\0\3\6\3\0\2\6\1\256"+
    "\2\6\5\0\3\6\1\0\1\6\2\0\17\6\1\257"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\5\6\1\260\4\6\1\261\5\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\5\6"+
    "\1\262\12\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\13\6\1\263\4\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\5\6"+
    "\1\264\4\6\1\265\5\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\10\6\1\266\7\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\2\6\1\267\15\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\270\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\12\6\1\271\5\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\6\1\272\16\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\273\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\6\1\274\16\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\15\6\1\275\2\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\5\6\1\276\12\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\14\6\1\277\3\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\20\6\11\0\3\6\3\0"+
    "\1\6\1\300\3\6\5\0\3\6\1\0\1\6\2\0"+
    "\15\6\1\301\2\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\6\6\1\302\11\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\20\6\11\0\3\6\3\0\1\303\4\6\5\0\3\6"+
    "\1\0\1\6\2\0\20\6\11\0\1\304\2\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\7\6\1\305"+
    "\10\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\15\6\1\306\2\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\6\6\1\307"+
    "\11\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\6\6\1\310\5\6\1\311\3\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\2\6\1\312\15\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\313\2\6\1\314\14\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\6\6\1\315\11\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\3\6\1\316\14\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\1\317\2\6\1\320\14\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\2\6\1\321"+
    "\15\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\2\6\1\322\15\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\20\6\11\0"+
    "\1\323\2\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\12\6\1\324\5\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\325\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\6\1\326\16\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\6\1\327\16\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\330\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\11\6\1\331\6\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\11\6\1\332\6\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\6\6\1\333\11\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\5\6\1\334\12\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\10\6\1\335\7\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\336\17\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\5\6\1\337\12\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\340"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\341\17\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\11\6\1\342\6\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\3\6\1\343\14\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\15\6\1\344\2\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\1\345\17\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\346\17\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\14\6"+
    "\1\347\1\6\1\350\1\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\20\6\11\0\3\6"+
    "\3\0\1\351\4\6\5\0\3\6\1\0\1\6\2\0"+
    "\3\6\1\352\14\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\2\6\1\353\15\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\16\6\1\354\1\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\20\6\11\0\3\6\3\0"+
    "\3\6\1\355\1\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\356\17\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\6\6\1\357\11\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\360"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\20\6\11\0\3\6\3\0\1\361\4\6"+
    "\5\0\3\6\1\0\1\6\2\0\3\6\1\362\14\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\16\6\1\363\1\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\7\6\1\364\10\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\4\6\1\365\13\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\366\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\367\17\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\6\1\370\16\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\6\6"+
    "\1\371\11\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\372\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\373"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\6\1\374\16\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\375\17\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\7\6\1\376\10\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\377\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\11\6\1\u0100\6\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\6\6\1\u0101\11\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\7\6\1\u0102\10\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\6\1\u0103\16\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\u0104\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\20\6\11\0\3\6\3\0"+
    "\3\6\1\u0105\1\6\5\0\3\6\1\0\1\6\2\0"+
    "\7\6\1\u0106\10\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\u0107\17\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\2\6"+
    "\1\u0108\15\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\u0109\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\10\6"+
    "\1\u010a\7\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\6\1\u010b\16\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\12\6"+
    "\1\u010c\5\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\3\6\1\u010d\14\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\2\6"+
    "\1\u010e\15\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\16\6\1\u010f\1\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\14\6"+
    "\1\u0110\3\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\u0111\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\2\6"+
    "\1\u0112\15\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\6\6\1\u0113\11\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\3\6"+
    "\1\u0114\14\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\4\6\1\u0115\13\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\3\6"+
    "\1\u0116\14\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\14\6\1\u0117\3\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\14\6"+
    "\1\u0118\3\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\6\6\1\u0119\11\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\6\6"+
    "\1\u011a\11\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\6\6\1\u011b\11\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\14\6"+
    "\1\u011c\3\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\6\6\1\u011d\11\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\7\6"+
    "\1\u011e\10\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\u011f\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\3\6"+
    "\1\u0120\14\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\15\6\1\u0121\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\12\6"+
    "\1\u0122\5\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\14\6\1\u0123\3\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\16\6"+
    "\1\u0124\1\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\5\6\1\u0125\12\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\6\6"+
    "\1\u0126\11\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\5\6\1\u0127\12\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\12\6"+
    "\1\u0128\5\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\6\1\u0129\16\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u012a"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\20\6\11\0\3\6\3\0\3\6\1\u012b"+
    "\1\6\5\0\3\6\1\0\1\6\2\0\7\6\1\u012c"+
    "\10\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\6\6\1\u012d\11\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\5\6\1\u012e"+
    "\12\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\u012f\17\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\4\6\1\u0130\13\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\6\6\1\u0131\11\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\2\6\1\u0132\15\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\6\6\1\u0133\11\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\20\6\11\0\3\6"+
    "\3\0\1\u0134\4\6\5\0\3\6\1\0\1\6\2\0"+
    "\20\6\11\0\1\u0135\2\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\15\6\1\u0136\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\2\6"+
    "\1\u0137\15\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\5\6\1\u0138\12\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u0139"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\20\6\11\0\3\6\3\0\1\u013a\4\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\u013b\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\5\6\1\u013c\12\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\4\6\1\u013d\13\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\20\6\11\0\3\6\3\0\1\u013e\4\6\5\0\3\6"+
    "\1\0\1\6\2\0\3\6\1\u013f\14\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u0140"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\13\6\1\u0141\4\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\2\6\1\u0142"+
    "\15\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\14\6\1\u0143\3\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\2\6\1\u0144"+
    "\15\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\6\1\u0145\16\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\2\6\1\u0146"+
    "\15\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\2\6\1\u0147\15\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\2\6\1\u0148"+
    "\15\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\5\6\1\u0149\1\u014a\11\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\17\6"+
    "\1\u014b\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\6\1\u014c\16\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\u014d\17\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\17\6\1\u014e\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\5\6\1\u014f\12\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\u0150\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\6\6\1\u0151\11\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\2\6\1\u0152\15\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\3\6\1\u0153\14\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\12\6\1\u0154\5\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\20\6\11\0\1\u0155\2\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\20\6"+
    "\11\0\3\6\3\0\1\u0156\4\6\5\0\3\6\1\0"+
    "\1\6\2\0\14\6\1\u0157\3\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\3\6\1\u0158"+
    "\14\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\3\6\1\u0159\1\6\1\u015a\12\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\u015b\17\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\6\1\u015c\16\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\15\6"+
    "\1\u015d\2\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\17\6\1\u015e\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\14\6\1\u015f"+
    "\3\6\11\0\1\u0160\2\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\15\6\1\u0161\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\13\6"+
    "\1\u0162\4\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\15\6\1\u0163\2\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\5\6"+
    "\1\u0164\12\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\11\6\1\u0165\6\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u0166"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\u0167\17\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\6\1\u0168\16\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\5\6\1\u0169\12\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\11\6\1\u016a\6\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\1\u016b\17\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\7\6\1\u016c\10\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\u016d\17\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\12\6\1\u016e\5\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\4\6"+
    "\1\u016f\13\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\u0170\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u0171"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\15\6\1\u0172\2\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\7\6\1\u0173"+
    "\10\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\2\6\1\u0174\15\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\20\6\11\0"+
    "\1\u0175\2\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\1\6\1\u0176\16\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\u0177\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\14\6\1\u0178\3\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\11\6\1\u0179\6\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\6\1\u017a\16\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\12\6\1\u017b\5\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\u017c\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\12\6\1\u017d\5\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\2\6\1\u017e\15\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\7\6\1\u017f\10\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\6\6\1\u0180\11\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\2\6\1\u0181\15\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\3\6\1\u0182\14\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\6\6\1\u0183\11\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\6\1\u0184\16\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\2\6\1\u0185\15\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\4\6\1\u0186\13\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\6\1\u0187\16\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\1\u0188\17\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\u0189\17\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\6\6\1\u018a"+
    "\11\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\1\u018b\17\6\11\0\3\6\3\0\5\6"+
    "\5\0\3\6\1\0\1\6\2\0\1\u018c\17\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\2\6\1\u018d\15\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\1\u018e\17\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\2\6"+
    "\1\u018f\15\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\1\6\1\u0190\16\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\5\6"+
    "\1\u0191\12\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\u0192\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u0193"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\7\6\1\u0194\10\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\u0195\17\6"+
    "\11\0\3\6\3\0\5\6\5\0\3\6\1\0\1\6"+
    "\2\0\20\6\11\0\1\u0196\2\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\11\6\1\u0197\6\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\2\6\1\u0198\15\6\11\0\3\6\3\0\5\6\5\0"+
    "\3\6\1\0\1\6\2\0\2\6\1\u0199\15\6\11\0"+
    "\3\6\3\0\5\6\5\0\3\6\1\0\1\6\2\0"+
    "\20\6\11\0\1\u019a\2\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\2\6\1\u019b\15\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\6\6"+
    "\1\u019c\11\6\11\0\3\6\3\0\5\6\5\0\3\6"+
    "\1\0\1\6\2\0\3\6\1\u019d\14\6\11\0\3\6"+
    "\3\0\5\6\5\0\3\6\1\0\1\6\2\0\1\u019e"+
    "\17\6\11\0\3\6\3\0\5\6\5\0\3\6\1\0"+
    "\1\6\2\0\15\6\1\u019f\2\6\11\0\3\6\3\0"+
    "\5\6\5\0\3\6\1\0\1\6\2\0\1\6\1\u01a0"+
    "\16\6\11\0\3\6\3\0\5\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14640];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\24\1\2\11\1\1\2\11\1\1\1\11"+
    "\5\1\1\11\5\1\1\11\1\1\2\0\1\11\1\0"+
    "\66\1\4\11\6\1\2\11\7\1\1\11\u0127\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[416];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  _VhdlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _VhdlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  // For Demetra compatibility
  public void reset(CharSequence buffer, int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = 0;
    zzPushbackPos = 0;
    zzAtEOF = false;
    zzAtBOL = true;
    zzEndRead = buffer.length();
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = zzLexicalState;


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 59: 
          { yybegin(YYINITIAL); return VhdlTypes.NAND;
          }
        case 123: break;
        case 78: 
          { yybegin(YYINITIAL); return VhdlTypes.UNTIL;
          }
        case 124: break;
        case 111: 
          { yybegin(YYINITIAL); return VhdlTypes.GENERATE;
          }
        case 125: break;
        case 102: 
          { yybegin(YYINITIAL); return VhdlTypes.GENERIC;
          }
        case 126: break;
        case 95: 
          { yybegin(YYINITIAL); return VhdlTypes.SHARED;
          }
        case 127: break;
        case 46: 
          { yybegin(YYINITIAL); return VhdlTypes.BUS;
          }
        case 128: break;
        case 81: 
          { yybegin(YYINITIAL); return VhdlTypes.BEGIN;
          }
        case 129: break;
        case 5: 
          { yybegin(YYINITIAL); return VhdlTypes.INTLIT;
          }
        case 130: break;
        case 76: 
          { yybegin(YYINITIAL); return VhdlTypes.ALIAS;
          }
        case 131: break;
        case 19: 
          { yybegin(YYINITIAL); return VhdlTypes.COMMENT;
          }
        case 132: break;
        case 106: 
          { yybegin(YYINITIAL); return VhdlTypes.INERTIAL;
          }
        case 133: break;
        case 120: 
          { yybegin(YYINITIAL); return VhdlTypes.DISCONNECT;
          }
        case 134: break;
        case 4: 
          { yybegin(YYINITIAL); return VhdlTypes.ID;
          }
        case 135: break;
        case 6: 
          { yybegin(YYINITIAL); return VhdlTypes.DOT;
          }
        case 136: break;
        case 105: 
          { yybegin(YYINITIAL); return VhdlTypes.PROCESS;
          }
        case 137: break;
        case 72: 
          { yybegin(YYINITIAL); return VhdlTypes.WHEN;
          }
        case 138: break;
        case 9: 
          { yybegin(YYINITIAL); return VhdlTypes.LEFPAREN;
          }
        case 139: break;
        case 68: 
          { yybegin(YYINITIAL); return VhdlTypes.XNOR;
          }
        case 140: break;
        case 21: 
          { yybegin(YYINITIAL); return VhdlTypes.TO;
          }
        case 141: break;
        case 96: 
          { yybegin(YYINITIAL); return VhdlTypes.OTHERS;
          }
        case 142: break;
        case 58: 
          { yybegin(YYINITIAL); return VhdlTypes.NEXT;
          }
        case 143: break;
        case 109: 
          { yybegin(YYINITIAL); return VhdlTypes.SEVERITY;
          }
        case 144: break;
        case 75: 
          { yybegin(YYINITIAL); return VhdlTypes.ARRAY;
          }
        case 145: break;
        case 84: 
          { yybegin(YYINITIAL); return VhdlTypes.WHILE;
          }
        case 146: break;
        case 110: 
          { yybegin(YYINITIAL); return VhdlTypes.FUNCTION;
          }
        case 147: break;
        case 121: 
          { yybegin(YYINITIAL); return VhdlTypes.ARCHITECTURE;
          }
        case 148: break;
        case 36: 
          { yybegin(YYINITIAL); return VhdlTypes.NEW;
          }
        case 149: break;
        case 117: 
          { yybegin(YYINITIAL); return VhdlTypes.POSTPONED;
          }
        case 150: break;
        case 103: 
          { yybegin(YYINITIAL); return VhdlTypes.GUARDED;
          }
        case 151: break;
        case 51: 
          { yybegin(YYINITIAL); return VhdlTypes.OUT;
          }
        case 152: break;
        case 91: 
          { yybegin(YYINITIAL); return VhdlTypes.REJECT;
          }
        case 153: break;
        case 79: 
          { yybegin(YYINITIAL); return VhdlTypes.UNITS;
          }
        case 154: break;
        case 18: 
          { yybegin(YYINITIAL); return VhdlTypes.CMA;
          }
        case 155: break;
        case 115: 
          { yybegin(YYINITIAL); return VhdlTypes.COMPONENT;
          }
        case 156: break;
        case 3: 
          { yybegin(YYINITIAL); return VhdlTypes.SUB;
          }
        case 157: break;
        case 70: 
          { yybegin(YYINITIAL); return VhdlTypes.PORT;
          }
        case 158: break;
        case 89: 
          { yybegin(YYINITIAL); return VhdlTypes.RETURN;
          }
        case 159: break;
        case 61: 
          { yybegin(YYINITIAL); return VhdlTypes.TYPE;
          }
        case 160: break;
        case 8: 
          { yybegin(YYINITIAL); return VhdlTypes.COLON;
          }
        case 161: break;
        case 60: 
          { yybegin(YYINITIAL); return VhdlTypes.NULL;
          }
        case 162: break;
        case 2: 
          { return TokenType.WHITE_SPACE;
          }
        case 163: break;
        case 28: 
          { yybegin(YYINITIAL); return VhdlTypes.BLOCK_ASSIGN;
          }
        case 164: break;
        case 88: 
          { yybegin(YYINITIAL); return VhdlTypes.ASSERT;
          }
        case 165: break;
        case 74: 
          { yybegin(YYINITIAL); return VhdlTypes.INOUT;
          }
        case 166: break;
        case 104: 
          { yybegin(YYINITIAL); return VhdlTypes.PACKAGE;
          }
        case 167: break;
        case 99: 
          { yybegin(YYINITIAL); return VhdlTypes.LITERAL;
          }
        case 168: break;
        case 114: 
          { yybegin(YYINITIAL); return VhdlTypes.ATTRIBUTE;
          }
        case 169: break;
        case 86: 
          { yybegin(YYINITIAL); return VhdlTypes.IMPURE;
          }
        case 170: break;
        case 7: 
          { yybegin(YYINITIAL); return VhdlTypes.SEMI;
          }
        case 171: break;
        case 97: 
          { yybegin(YYINITIAL); return VhdlTypes.DOWNTO;
          }
        case 172: break;
        case 37: 
          { yybegin(YYINITIAL); return VhdlTypes.NOT;
          }
        case 173: break;
        case 108: 
          { yybegin(YYINITIAL); return VhdlTypes.CONSTANT;
          }
        case 174: break;
        case 40: 
          { yybegin(YYINITIAL); return VhdlTypes.ALL;
          }
        case 175: break;
        case 54: 
          { yybegin(YYINITIAL); return VhdlTypes.MAP;
          }
        case 176: break;
        case 14: 
          { yybegin(YYINITIAL); return VhdlTypes.MUL;
          }
        case 177: break;
        case 25: 
          { yybegin(YYINITIAL); return VhdlTypes.ON;
          }
        case 178: break;
        case 33: 
          { yybegin(YYINITIAL); return VhdlTypes.GTE;
          }
        case 179: break;
        case 52: 
          { yybegin(YYINITIAL); return VhdlTypes.FOR;
          }
        case 180: break;
        case 47: 
          { yybegin(YYINITIAL); return VhdlTypes.SRA;
          }
        case 181: break;
        case 31: 
          { yybegin(YYINITIAL); return VhdlTypes.EXP;
          }
        case 182: break;
        case 77: 
          { yybegin(YYINITIAL); return VhdlTypes.AFTER;
          }
        case 183: break;
        case 65: 
          { yybegin(YYINITIAL); return VhdlTypes.BODY;
          }
        case 184: break;
        case 112: 
          { yybegin(YYINITIAL); return VhdlTypes.VARIABLE;
          }
        case 185: break;
        case 92: 
          { yybegin(YYINITIAL); return VhdlTypes.BUFFER;
          }
        case 186: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 187: break;
        case 16: 
          { yybegin(YYINITIAL); return VhdlTypes.LT;
          }
        case 188: break;
        case 93: 
          { yybegin(YYINITIAL); return VhdlTypes.SELECT;
          }
        case 189: break;
        case 20: 
          { yybegin(YYINITIAL); return VhdlTypes.STRLIT;
          }
        case 190: break;
        case 101: 
          { yybegin(YYINITIAL); return VhdlTypes.SUBTYPE;
          }
        case 191: break;
        case 67: 
          { yybegin(YYINITIAL); return VhdlTypes.FILE;
          }
        case 192: break;
        case 82: 
          { yybegin(YYINITIAL); return VhdlTypes.BLOCK;
          }
        case 193: break;
        case 41: 
          { yybegin(YYINITIAL); return VhdlTypes.ABS;
          }
        case 194: break;
        case 119: 
          { yybegin(YYINITIAL); return VhdlTypes.UNAFFECTED;
          }
        case 195: break;
        case 32: 
          { yybegin(YYINITIAL); return VhdlTypes.NOBLOCK_ASSIGN;
          }
        case 196: break;
        case 56: 
          { yybegin(YYINITIAL); return VhdlTypes.ELSE;
          }
        case 197: break;
        case 22: 
          { yybegin(YYINITIAL); return VhdlTypes.IN;
          }
        case 198: break;
        case 71: 
          { yybegin(YYINITIAL); return VhdlTypes.WITH;
          }
        case 199: break;
        case 39: 
          { yybegin(YYINITIAL); return VhdlTypes.AND;
          }
        case 200: break;
        case 80: 
          { yybegin(YYINITIAL); return VhdlTypes.LABEL;
          }
        case 201: break;
        case 49: 
          { yybegin(YYINITIAL); return VhdlTypes.SLA;
          }
        case 202: break;
        case 107: 
          { yybegin(YYINITIAL); return VhdlTypes.REGISTER;
          }
        case 203: break;
        case 62: 
          { yybegin(YYINITIAL); return VhdlTypes.THEN;
          }
        case 204: break;
        case 38: 
          { yybegin(YYINITIAL); return VhdlTypes.NOR;
          }
        case 205: break;
        case 15: 
          { yybegin(YYINITIAL); return VhdlTypes.CONCAT;
          }
        case 206: break;
        case 113: 
          { yybegin(YYINITIAL); return VhdlTypes.TRANSPORT;
          }
        case 207: break;
        case 48: 
          { yybegin(YYINITIAL); return VhdlTypes.SRL;
          }
        case 208: break;
        case 63: 
          { yybegin(YYINITIAL); return VhdlTypes.CASE;
          }
        case 209: break;
        case 17: 
          { yybegin(YYINITIAL); return VhdlTypes.GT;
          }
        case 210: break;
        case 64: 
          { yybegin(YYINITIAL); return VhdlTypes.LOOP;
          }
        case 211: break;
        case 98: 
          { yybegin(YYINITIAL); return VhdlTypes.LINKAGE;
          }
        case 212: break;
        case 27: 
          { yybegin(YYINITIAL); return VhdlTypes.OF;
          }
        case 213: break;
        case 116: 
          { yybegin(YYINITIAL); return VhdlTypes.PROCEDURE;
          }
        case 214: break;
        case 94: 
          { yybegin(YYINITIAL); return VhdlTypes.SIGNAL;
          }
        case 215: break;
        case 35: 
          { yybegin(YYINITIAL); return VhdlTypes.END;
          }
        case 216: break;
        case 10: 
          { yybegin(YYINITIAL); return VhdlTypes.RIGHPAREN;
          }
        case 217: break;
        case 44: 
          { yybegin(YYINITIAL); return VhdlTypes.ROL;
          }
        case 218: break;
        case 85: 
          { yybegin(YYINITIAL); return VhdlTypes.ENTITY;
          }
        case 219: break;
        case 73: 
          { yybegin(YYINITIAL); return VhdlTypes.ELSIF;
          }
        case 220: break;
        case 43: 
          { yybegin(YYINITIAL); return VhdlTypes.ROR;
          }
        case 221: break;
        case 26: 
          { yybegin(YYINITIAL); return VhdlTypes.OR;
          }
        case 222: break;
        case 29: 
          { yybegin(YYINITIAL); return VhdlTypes.RARR;
          }
        case 223: break;
        case 23: 
          { yybegin(YYINITIAL); return VhdlTypes.IS;
          }
        case 224: break;
        case 57: 
          { yybegin(YYINITIAL); return VhdlTypes.EXIT;
          }
        case 225: break;
        case 69: 
          { yybegin(YYINITIAL); return VhdlTypes.PURE;
          }
        case 226: break;
        case 66: 
          { yybegin(YYINITIAL); return VhdlTypes.OPEN;
          }
        case 227: break;
        case 45: 
          { yybegin(YYINITIAL); return VhdlTypes.USE;
          }
        case 228: break;
        case 118: 
          { yybegin(YYINITIAL); return VhdlTypes.CONSTRAINT;
          }
        case 229: break;
        case 90: 
          { yybegin(YYINITIAL); return VhdlTypes.REPORT;
          }
        case 230: break;
        case 83: 
          { yybegin(YYINITIAL); return VhdlTypes.GROUP;
          }
        case 231: break;
        case 50: 
          { yybegin(YYINITIAL); return VhdlTypes.SLL;
          }
        case 232: break;
        case 87: 
          { yybegin(YYINITIAL); return VhdlTypes.ACCESS;
          }
        case 233: break;
        case 11: 
          { yybegin(YYINITIAL); return VhdlTypes.EQU;
          }
        case 234: break;
        case 42: 
          { yybegin(YYINITIAL); return VhdlTypes.REM;
          }
        case 235: break;
        case 122: 
          { yybegin(YYINITIAL); return VhdlTypes.CONFIGURATION;
          }
        case 236: break;
        case 34: 
          { yybegin(YYINITIAL); return VhdlTypes.SIGLIT;
          }
        case 237: break;
        case 24: 
          { yybegin(YYINITIAL); return VhdlTypes.IF;
          }
        case 238: break;
        case 55: 
          { yybegin(YYINITIAL); return VhdlTypes.MOD;
          }
        case 239: break;
        case 30: 
          { yybegin(YYINITIAL); return VhdlTypes.NE;
          }
        case 240: break;
        case 100: 
          { yybegin(YYINITIAL); return VhdlTypes.LIBRARY;
          }
        case 241: break;
        case 53: 
          { yybegin(YYINITIAL); return VhdlTypes.XOR;
          }
        case 242: break;
        case 13: 
          { yybegin(YYINITIAL); return VhdlTypes.DIV;
          }
        case 243: break;
        case 12: 
          { yybegin(YYINITIAL); return VhdlTypes.ADD;
          }
        case 244: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
